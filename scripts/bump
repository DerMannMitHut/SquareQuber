#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<EOF
Usage: scripts/bump [patch|minor|major|<x.y.z>]

Increments package.json version and creates a commit:
  chore(release): vX.Y.Z

Examples:
  scripts/bump patch
  scripts/bump minor
  scripts/bump 1.2.3
EOF
}

inc() {
  local v=$1 part=$2
  IFS=. read -r a b c <<<"${v%%[-+]*}"
  a=${a:-0}; b=${b:-0}; c=${c:-0}
  case "$part" in
    patch) c=$((c+1));;
    minor) b=$((b+1)); c=0;;
    major) a=$((a+1)); b=0; c=0;;
  esac
  echo "$a.$b.$c"
}

PART=${1:-}
if [[ -z "$PART" ]]; then usage; exit 1; fi

CUR=$(node -e "console.log(require('./package.json').version||'')")
if [[ "$PART" =~ ^[0-9]+\.[0-9]+\.[0-9]+([\-+][0-9A-Za-z\.-]+)?$ ]]; then
  NEW=$PART
else
  case "$PART" in
    patch|minor|major) NEW=$(inc "$CUR" "$PART");;
    *) echo "Unknown arg: $PART" >&2; usage; exit 1;;
  esac
fi

node -e "const fs=require('fs');const p=require('./package.json');p.version='${NEW}';fs.writeFileSync('package.json', JSON.stringify(p,null,2)+'\n');console.log('version -> ${NEW}')"

# Rebuild single-file output so the injected version matches
npm run --silent build || scripts/build

git add package.json dist/SquareQuber.html
git commit -m "chore(release): v${NEW}"
echo "Bumped to v${NEW} and rebuilt dist/SquareQuber.html. Push with: git push"
